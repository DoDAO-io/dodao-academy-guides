{
  "categories": [
    "engineering"
  ],
  "content": "What are optimistic rollups and the different proof mechanisms",
  "created": "2022-11-30T00:36:22.685Z",
  "guideIntegrations": {
    "discordRoleIds": []
  },
  "guideType": "course",
  "key": "optimistic-rollups-dodao-academy",
  "name": "Optimistic Rollups",
  "postSubmissionStepContent": "#### Read More\nhttps://blog.infura.io/post/validating-bridges-scaling-blockchains \nhttps://stonecoldpat.github.io/images/validatingbridges.pdf\nhttps://medium.com/@cpbuckland88/fraud-proofs-and-virtual-machines-2826a3412099\n",
  "publishStatus": "Live",
  "showIncorrectOnCompletion": true,
  "steps": [
    {
      "content": "## Bridges/Rollups\n\nBridges are responsible for holding assets on a layer-1 blockchain while those same assets are released on another service. This defines who has custody of the funds and the conditions that must be met before the assets can be unlocked. The withdrawal request destroys coins on the off-chain system and updates the bridge contract about the user’s entitlement to withdraw their coins back to the Layer 1 blockchain. This allows users to move their coins back and forth between the two systems without having to worry about losing any of their value.\n\nBridges carryout functions similar to the below:\n1. Deposit. A user can deposit funds into the bridge, and then corresponding assets are set up on the other system.\n2. Update account balance. The bridge is told about new account balances, which can help the withdrawal process.\n3. Withdrawal. A user can withdraw their assets from the bridge according to their balance on the other system, and the tokens issued on the other system are destroyed.\n4. Censorship resistance. The bridge contract can enforce the eventual ordering and execution of transactions to ensure users can always unwind their positions and withdraw their funds.\n        ",
      "name": "Background",
      "stepItems": [],
      "uuid": "25c6efd4-8cbb-4501-a5d8-09a4e9c2f8b2"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "answerKeys": [
            "96fc53b4"
          ],
          "choices": [
            {
              "content": "A",
              "key": "e14833e1"
            },
            {
              "content": "B",
              "key": "96fc53b4"
            },
            {
              "content": "C",
              "key": "e6908d80"
            },
            {
              "content": "D",
              "key": "e5f3ea4c"
            }
          ],
          "content": "Q1",
          "type": "SingleChoice",
          "uuid": "af0b2a47-8fe5-468e-b7a9-f3a90570320e"
        }
      ],
      "uuid": "5d642a3f-5f46-4690-ab86-1854c75155e4"
    },
    {
      "content": "\nThe validating bridge contract is tasked with protecting the integrity of the database and ensuring that proposed state updates are eventually applied to the database. This ensures that the database remains live and accessible to all users.\n\nThere are two ways in which the commitments can be verified:\n\n### Fraud-proof approach(Optimistic) \nChallengers are responsible for validating commitments posted to the bridge contract. There is a challenge time window to provide time for a challenger to send indisputable evidence (proof of fraud) about the commitment’s validity. If there is no evidence of fraud by the time the challenge expires, then the commitment is accepted as valid.\n\n### Validity-proof approach (Zero-knowledge). The executor must present evidence alongside the commitment to prove that all state transitions are valid. There is no challenge period and the bridge contract can accept the commitment immediately.\n\nZero-knowledge proofs allow the prover to show that a commitment is valid without revealing any information about the inputs. This proof can be verified quickly and easily, making it a valuable tool for ensuring computational integrity. However, the downside of zero-knowledge proofs is that they can be computationally intensive for the prover, especially for generic computations. Engineers are actively working to improve this technology so that it is more efficient and easier to use.",
      "name": "Validators",
      "stepItems": [],
      "uuid": "2fc6f67d-37d0-4b5e-a5f7-e716e3dbf2f1"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "answerKeys": [
            "0449fcb9"
          ],
          "choices": [
            {
              "content": "A",
              "key": "7bee6fff"
            },
            {
              "content": "B",
              "key": "0449fcb9"
            },
            {
              "content": "C",
              "key": "ccc850ac"
            },
            {
              "content": "D",
              "key": "cf067c4a"
            }
          ],
          "content": "Q2",
          "type": "SingleChoice",
          "uuid": "17f2f4e1-21cf-42f2-a9a2-159989e3fbc5"
        }
      ],
      "uuid": "f484ce80-234b-4202-8aa9-041caeee003d"
    },
    {
      "content": "There are currently two approaches for pinpointing a disputed state transition in Optimistic Rollups:\n\n1. **One-round fraud proof** -  means that the challenger has a list of intermediary state transitions for the commitment being asserted, which can be used to pinpoint the disputed state transition. The challenger then submits the disputed intermediary state transitions along with a list of inclusion proofs about the state transition's pre-state, the state transition itself, and the executor's asserted post-state after it is executed. This allows for quick and easy fraud detection in commitments. \n \nIn Optimism, all state commitments are sent to the bridge contract, allowing a challenger to identify which state transition should be executed by the bridge contract. No cooperation with the executor is necessary, and a valid commitment cannot be evaluated as invalid by a fraud proof. If a commitment is proven to be invalid, it can be discarded, along with slashing the executor who proposed it. However, for V2 they’re moving towards using interactive proofs. \\\n\n2. **Multi-round fraud proof** - is a method used to make it harder for fraud to happen. In this system, the list of intermediary state transitions for an asserted commitment is not sent to the bridge contract. This makes it more difficult to pinpoint an individual state transition in a single-round. Instead, the challenger and executor must agree upon the total number of instructions executed within the commitment. They will then perform a binary search until they pinpoint the disputed instruction. \n \nArbitrum's multi-round fraud proof system is a binary search between two parties to find the first opcode of a whole block that they disagree on. Once found, only this particular opcode is executed on-chain.\n\nhttps://twitter.com/krzkaczor/status/1395812319494557702?lang=en\n",
      "name": "Disputes in Optimistic",
      "stepItems": [],
      "uuid": "a5873128-7fce-4bfc-95a7-a99887a7f987"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "answerKeys": [
            "c038a5a7"
          ],
          "choices": [
            {
              "content": "A",
              "key": "1a95824f"
            },
            {
              "content": "B",
              "key": "c038a5a7"
            },
            {
              "content": "C",
              "key": "f00d64fb"
            },
            {
              "content": "D",
              "key": "9b0493fa"
            }
          ],
          "content": "Q3",
          "type": "SingleChoice",
          "uuid": "73ab252e-af32-43ee-9e7b-158a95e20d19"
        }
      ],
      "uuid": "f49142fc-eddd-4116-9c25-01f365813d05"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/QmWy8EeMnxqx96VEPx2NBwzqtKxvMQqVVYvmPKgAYS2cUi",
  "uuid": "5aede7a6-9a16-4259-8551-e111436b8eca"
}